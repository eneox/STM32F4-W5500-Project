
ethernet_project_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003690  08003690  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003698  08003698  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080036a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
 10 .bss          0000009c  2000003c  2000003c  0002003c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0002003c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087e1  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a35  00000000  00000000  0002884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002039f  00000000  00000000  0002b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000887e  00000000  00000000  0004b587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c48bb  00000000  00000000  00053e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001186c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f94  00000000  00000000  00118714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003648 	.word	0x08003648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08003648 	.word	0x08003648

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <cs_sel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void cs_sel() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //CS LOW
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <cs_sel+0x14>)
 80004cc:	f001 fe8e 	bl	80021ec <HAL_GPIO_WritePin>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40020000 	.word	0x40020000

080004d8 <cs_desel>:

void cs_desel() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //CS HIGH
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	4802      	ldr	r0, [pc, #8]	; (80004ec <cs_desel+0x14>)
 80004e4:	f001 fe82 	bl	80021ec <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40020000 	.word	0x40020000

080004f0 <spi_rb>:

uint8_t spi_rb(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80004f6:	1df9      	adds	r1, r7, #7
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	2201      	movs	r2, #1
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <spi_rb+0x20>)
 8000500:	f002 fc93 	bl	8002e2a <HAL_SPI_Receive>
	return rbuf;
 8000504:	79fb      	ldrb	r3, [r7, #7]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000007c 	.word	0x2000007c

08000514 <spi_wb>:

void spi_wb(uint8_t b) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 800051e:	1df9      	adds	r1, r7, #7
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	2201      	movs	r2, #1
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <spi_wb+0x20>)
 8000528:	f002 fb43 	bl	8002bb2 <HAL_SPI_Transmit>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	2000007c 	.word	0x2000007c

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09a      	sub	sp, #104	; 0x68
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2};
 800053e:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f001 fb3a 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f8bc 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f95a 	bl	8000804 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000550:	f000 f922 	bl	8000798 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000554:	4951      	ldr	r1, [pc, #324]	; (800069c <main+0x164>)
 8000556:	4852      	ldr	r0, [pc, #328]	; (80006a0 <main+0x168>)
 8000558:	f001 f95c 	bl	8001814 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 800055c:	4951      	ldr	r1, [pc, #324]	; (80006a4 <main+0x16c>)
 800055e:	4852      	ldr	r0, [pc, #328]	; (80006a8 <main+0x170>)
 8000560:	f001 f97e 	bl	8001860 <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 8000564:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f001 f9ee 	bl	8001950 <wizchip_init>
    wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
 8000584:	f8c3 2013 	str.w	r2, [r3, #19]
 8000588:	4a48      	ldr	r2, [pc, #288]	; (80006ac <main+0x174>)
 800058a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000592:	6018      	str	r0, [r3, #0]
 8000594:	3304      	adds	r3, #4
 8000596:	8019      	strh	r1, [r3, #0]
 8000598:	4a45      	ldr	r2, [pc, #276]	; (80006b0 <main+0x178>)
 800059a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800059e:	6810      	ldr	r0, [r2, #0]
 80005a0:	6018      	str	r0, [r3, #0]
 80005a2:	4a44      	ldr	r2, [pc, #272]	; (80006b4 <main+0x17c>)
 80005a4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80005a8:	6810      	ldr	r0, [r2, #0]
 80005aa:	6018      	str	r0, [r3, #0]
 80005ac:	4a42      	ldr	r2, [pc, #264]	; (80006b8 <main+0x180>)
 80005ae:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	6018      	str	r0, [r3, #0]
                            .ip 	= {192, 168, 1, 45},					// IP address
                            .sn 	= {255, 255, 255, 0},					// Subnet mask
                            .gw 	= {192, 168, 2, 1}};					// Gateway address
    wizchip_setnetinfo(&netInfo);
 80005b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fa54 	bl	8001a68 <wizchip_setnetinfo>
    wizchip_getnetinfo(&netInfo);
 80005c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fa8f 	bl	8001ae8 <wizchip_getnetinfo>
uint8_t s =0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
uint8_t serverip[4] = {192,168,1,104};
 80005d0:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <main+0x184>)
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t baglan;
uint8_t gidenler[] = "Enes Keskin";
 80005d4:	4a3a      	ldr	r2, [pc, #232]	; (80006c0 <main+0x188>)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	ca07      	ldmia	r2, {r0, r1, r2}
 80005dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
uint8_t gidenler_lenght = 11;
 80005e0:	230b      	movs	r3, #11
 80005e2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
socket(s, Sn_MR_TCP, 5656, SF_TCP_NODELAY);
 80005e6:	f897 0062 	ldrb.w	r0, [r7, #98]	; 0x62
 80005ea:	2320      	movs	r3, #32
 80005ec:	f241 6218 	movw	r2, #5656	; 0x1618
 80005f0:	2101      	movs	r1, #1
 80005f2:	f000 fcb3 	bl	8000f5c <socket>
while(baglan != SOCK_OK){
 80005f6:	e00b      	b.n	8000610 <main+0xd8>

baglan = connect(s, serverip, 5656);
 80005f8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80005fc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000600:	f241 6218 	movw	r2, #5656	; 0x1618
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fe2d 	bl	8001264 <connect>
 800060a:	4603      	mov	r3, r0
 800060c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
while(baglan != SOCK_OK){
 8000610:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000614:	2b01      	cmp	r3, #1
 8000616:	d1ef      	bne.n	80005f8 <main+0xc0>

}
baglan =0;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

send(s, gidenler, gidenler_lenght);
 800061e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000622:	b29a      	uxth	r2, r3
 8000624:	f107 0120 	add.w	r1, r7, #32
 8000628:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fef5 	bl	800141c <send>

while(received_len==0){
 8000632:	e017      	b.n	8000664 <main+0x12c>

if( (RSR_len = getSn_RX_RSR(s)) >0){
 8000634:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fb8c 	bl	8000d56 <getSn_RX_RSR>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8000644:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00b      	beq.n	8000664 <main+0x12c>

received_len = recv(s, data_buf, RSR_len);
 800064c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000650:	b29a      	uxth	r2, r3
 8000652:	4639      	mov	r1, r7
 8000654:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ffd9 	bl	8001610 <recv>
 800065e:	4603      	mov	r3, r0
 8000660:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
while(received_len==0){
 8000664:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0e3      	beq.n	8000634 <main+0xfc>
}

}
while(SOCK_OK == kop)
 800066c:	e00a      	b.n	8000684 <main+0x14c>
{
kop = close(s);
 800066e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fd88 	bl	8001188 <close>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
kop =0;
 800067e:	2300      	movs	r3, #0
 8000680:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
while(SOCK_OK == kop)
 8000684:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000688:	2b01      	cmp	r3, #1
 800068a:	d0f0      	beq.n	800066e <main+0x136>
}
HAL_Delay(2500);
 800068c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000690:	f001 fb06 	bl	8001ca0 <HAL_Delay>
received_len = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
socket(s, Sn_MR_TCP, 5656, SF_TCP_NODELAY);
 800069a:	e7a4      	b.n	80005e6 <main+0xae>
 800069c:	080004d9 	.word	0x080004d9
 80006a0:	080004c1 	.word	0x080004c1
 80006a4:	08000515 	.word	0x08000515
 80006a8:	080004f1 	.word	0x080004f1
 80006ac:	08003660 	.word	0x08003660
 80006b0:	08003668 	.word	0x08003668
 80006b4:	0800366c 	.word	0x0800366c
 80006b8:	08003670 	.word	0x08003670
 80006bc:	6801a8c0 	.word	0x6801a8c0
 80006c0:	08003674 	.word	0x08003674

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 ffb0 	bl	8003638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000738:	23a8      	movs	r3, #168	; 0xa8
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fd69 	bl	8002220 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f8a8 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2105      	movs	r1, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f001 ffca 	bl	8002710 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f891 	bl	80008a8 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f002 f959 	bl	8002aa0 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f858 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000007c 	.word	0x2000007c
 8000800:	40013000 	.word	0x40013000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_GPIO_Init+0x9c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <MX_GPIO_Init+0x9c>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_GPIO_Init+0x9c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_GPIO_Init+0x9c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <MX_GPIO_Init+0x9c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x9c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <MX_GPIO_Init+0x9c>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_GPIO_Init+0x9c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0xa0>)
 8000876:	f001 fcb9 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0xa0>)
 8000894:	f001 fb0e 	bl	8001eb4 <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <HAL_MspInit+0x4c>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_MspInit+0x4c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_SPI_MspInit+0x84>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d12b      	bne.n	800097e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_SPI_MspInit+0x88>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_SPI_MspInit+0x88>)
 8000930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_SPI_MspInit+0x88>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_SPI_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_SPI_MspInit+0x88>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_SPI_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800095e:	2338      	movs	r3, #56	; 0x38
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800096e:	2305      	movs	r3, #5
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 800097a:	f001 fa9b 	bl	8001eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40013000 	.word	0x40013000
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f001 f93e 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <WIZCHIP_READ+0x24>
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d114      	bne.n	8000a5a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a32:	6a1b      	ldr	r3, [r3, #32]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	0c12      	lsrs	r2, r2, #16
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a40:	6a1b      	ldr	r3, [r3, #32]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	0a12      	lsrs	r2, r2, #8
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	4610      	mov	r0, r2
 8000a4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	4610      	mov	r0, r2
 8000a56:	4798      	blx	r3
 8000a58:	e011      	b.n	8000a7e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	0c1b      	lsrs	r3, r3, #16
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	f107 020c 	add.w	r2, r7, #12
 8000a78:	2103      	movs	r1, #3
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4798      	blx	r3
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <WIZCHIP_READ+0x94>)
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	4798      	blx	r3
   return ret;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d119      	bne.n	8000b00 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	0c12      	lsrs	r2, r2, #16
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	0a12      	lsrs	r2, r2, #8
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	4610      	mov	r0, r2
 8000af2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	78fa      	ldrb	r2, [r7, #3]
 8000afa:	4610      	mov	r0, r2
 8000afc:	4798      	blx	r3
 8000afe:	e013      	b.n	8000b28 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	0c1b      	lsrs	r3, r3, #16
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1e:	f107 020c 	add.w	r2, r7, #12
 8000b22:	2104      	movs	r1, #4
 8000b24:	4610      	mov	r0, r2
 8000b26:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000b2e:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <WIZCHIP_WRITE+0x98>)
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	4798      	blx	r3
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008

08000b40 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <WIZCHIP_READ_BUF+0x2a>
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d126      	bne.n	8000bb8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	0c12      	lsrs	r2, r2, #16
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	4610      	mov	r0, r2
 8000b76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	0a12      	lsrs	r2, r2, #8
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	4610      	mov	r0, r2
 8000b84:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	4610      	mov	r0, r2
 8000b90:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	82fb      	strh	r3, [r7, #22]
 8000b96:	e00a      	b.n	8000bae <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	8afa      	ldrh	r2, [r7, #22]
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	188c      	adds	r4, r1, r2
 8000ba2:	4798      	blx	r3
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000ba8:	8afb      	ldrh	r3, [r7, #22]
 8000baa:	3301      	adds	r3, #1
 8000bac:	82fb      	strh	r3, [r7, #22]
 8000bae:	8afa      	ldrh	r2, [r7, #22]
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3f0      	bcc.n	8000b98 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000bb6:	e017      	b.n	8000be8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0c1b      	lsrs	r3, r3, #16
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f107 0210 	add.w	r2, r7, #16
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	4611      	mov	r1, r2
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000bee:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <WIZCHIP_READ_BUF+0xbc>)
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	4798      	blx	r3
}
 8000bf4:	bf00      	nop
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	20000008 	.word	0x20000008

08000c00 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d126      	bne.n	8000c78 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c2c:	6a1b      	ldr	r3, [r3, #32]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	0c12      	lsrs	r2, r2, #16
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	4610      	mov	r0, r2
 8000c36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	0a12      	lsrs	r2, r2, #8
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	4610      	mov	r0, r2
 8000c44:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	4610      	mov	r0, r2
 8000c50:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	82fb      	strh	r3, [r7, #22]
 8000c56:	e00a      	b.n	8000c6e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	8afa      	ldrh	r2, [r7, #22]
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	440a      	add	r2, r1
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	4610      	mov	r0, r2
 8000c66:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000c68:	8afb      	ldrh	r3, [r7, #22]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	82fb      	strh	r3, [r7, #22]
 8000c6e:	8afa      	ldrh	r2, [r7, #22]
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3f0      	bcc.n	8000c58 <WIZCHIP_WRITE_BUF+0x58>
 8000c76:	e017      	b.n	8000ca8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	0a1b      	lsrs	r3, r3, #8
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	f107 0210 	add.w	r2, r7, #16
 8000c96:	2103      	movs	r1, #3
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	88fa      	ldrh	r2, [r7, #6]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000cae:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	4798      	blx	r3
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81fb      	strh	r3, [r7, #14]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fe94 	bl	8000a0c <WIZCHIP_READ>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000ce8:	89bb      	ldrh	r3, [r7, #12]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b29c      	uxth	r4, r3
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fe86 	bl	8000a0c <WIZCHIP_READ>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4423      	add	r3, r4
 8000d06:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000d08:	89bb      	ldrh	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d01a      	beq.n	8000d44 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	3301      	adds	r3, #1
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe76 	bl	8000a0c <WIZCHIP_READ>
 8000d20:	4603      	mov	r3, r0
 8000d22:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000d24:	89fb      	ldrh	r3, [r7, #14]
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	b29c      	uxth	r4, r3
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	3301      	adds	r3, #1
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fe68 	bl	8000a0c <WIZCHIP_READ>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4423      	add	r3, r4
 8000d42:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000d44:	89fa      	ldrh	r2, [r7, #14]
 8000d46:	89bb      	ldrh	r3, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d1c2      	bne.n	8000cd2 <getSn_TX_FSR+0x12>
   return val;
 8000d4c:	89fb      	ldrh	r3, [r7, #14]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}

08000d56 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000d56:	b590      	push	{r4, r7, lr}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	81fb      	strh	r3, [r7, #14]
 8000d64:	2300      	movs	r3, #0
 8000d66:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fe49 	bl	8000a0c <WIZCHIP_READ>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000d7e:	89bb      	ldrh	r3, [r7, #12]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b29c      	uxth	r4, r3
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	3301      	adds	r3, #1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe3b 	bl	8000a0c <WIZCHIP_READ>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	4423      	add	r3, r4
 8000d9c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000d9e:	89bb      	ldrh	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d01a      	beq.n	8000dda <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	3301      	adds	r3, #1
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fe2b 	bl	8000a0c <WIZCHIP_READ>
 8000db6:	4603      	mov	r3, r0
 8000db8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000dba:	89fb      	ldrh	r3, [r7, #14]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b29c      	uxth	r4, r3
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe1d 	bl	8000a0c <WIZCHIP_READ>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4423      	add	r3, r4
 8000dd8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000dda:	89fa      	ldrh	r2, [r7, #14]
 8000ddc:	89bb      	ldrh	r3, [r7, #12]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d1c2      	bne.n	8000d68 <getSn_RX_RSR+0x12>
   return val;
 8000de2:	89fb      	ldrh	r3, [r7, #14]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d048      	beq.n	8000e9c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	3301      	adds	r3, #1
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fdf8 	bl	8000a0c <WIZCHIP_READ>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b29c      	uxth	r4, r3
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	3301      	adds	r3, #1
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fdeb 	bl	8000a0c <WIZCHIP_READ>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	4423      	add	r3, r4
 8000e3c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	3202      	adds	r2, #2
 8000e48:	00d2      	lsls	r2, r2, #3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	461a      	mov	r2, r3
 8000e52:	6839      	ldr	r1, [r7, #0]
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f7ff fed3 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000e5a:	89fa      	ldrh	r2, [r7, #14]
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	3301      	adds	r3, #1
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000e6e:	461a      	mov	r2, r3
 8000e70:	89fb      	ldrh	r3, [r7, #14]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	f7ff fe12 	bl	8000aa4 <WIZCHIP_WRITE>
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	3301      	adds	r3, #1
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	4610      	mov	r0, r2
 8000e96:	f7ff fe05 	bl	8000aa4 <WIZCHIP_WRITE>
 8000e9a:	e000      	b.n	8000e9e <wiz_send_data+0xb2>
   if(len == 0)  return;
 8000e9c:	bf00      	nop
}
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d048      	beq.n	8000f54 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fd9c 	bl	8000a0c <WIZCHIP_READ>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b29c      	uxth	r4, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fd8f 	bl	8000a0c <WIZCHIP_READ>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4423      	add	r3, r4
 8000ef4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	3203      	adds	r2, #3
 8000f00:	00d2      	lsls	r2, r2, #3
 8000f02:	4413      	add	r3, r2
 8000f04:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	6839      	ldr	r1, [r7, #0]
 8000f0c:	68b8      	ldr	r0, [r7, #8]
 8000f0e:	f7ff fe17 	bl	8000b40 <WIZCHIP_READ_BUF>
   ptr += len;
 8000f12:	89fa      	ldrh	r2, [r7, #14]
 8000f14:	88bb      	ldrh	r3, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	3301      	adds	r3, #1
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000f26:	461a      	mov	r2, r3
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f7ff fdb6 	bl	8000aa4 <WIZCHIP_WRITE>
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000f44:	461a      	mov	r2, r3
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f7ff fda9 	bl	8000aa4 <WIZCHIP_WRITE>
 8000f52:	e000      	b.n	8000f56 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8000f54:	bf00      	nop
}
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	460b      	mov	r3, r1
 8000f74:	80bb      	strh	r3, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d902      	bls.n	8000f86 <socket+0x2a>
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	e0f2      	b.n	800116c <socket+0x210>
	switch(protocol)
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <socket+0x3c>
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dd11      	ble.n	8000fb4 <socket+0x58>
 8000f90:	3b02      	subs	r3, #2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d80e      	bhi.n	8000fb4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000f96:	e011      	b.n	8000fbc <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000fa4:	f7ff fdcc 	bl	8000b40 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d105      	bne.n	8000fba <socket+0x5e>
 8000fae:	f06f 0302 	mvn.w	r3, #2
 8000fb2:	e0db      	b.n	800116c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000fb4:	f06f 0304 	mvn.w	r3, #4
 8000fb8:	e0d8      	b.n	800116c <socket+0x210>
	    break;
 8000fba:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <socket+0x70>
 8000fc6:	f06f 0305 	mvn.w	r3, #5
 8000fca:	e0cf      	b.n	800116c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d025      	beq.n	800101e <socket+0xc2>
	{
   	switch(protocol)
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d002      	beq.n	8000fde <socket+0x82>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d008      	beq.n	8000fee <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000fdc:	e024      	b.n	8001028 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11c      	bne.n	8001022 <socket+0xc6>
 8000fe8:	f06f 0305 	mvn.w	r3, #5
 8000fec:	e0be      	b.n	800116c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db02      	blt.n	8001006 <socket+0xaa>
 8001000:	f06f 0305 	mvn.w	r3, #5
 8001004:	e0b2      	b.n	800116c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00a      	beq.n	8001026 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db06      	blt.n	8001026 <socket+0xca>
 8001018:	f06f 0305 	mvn.w	r3, #5
 800101c:	e0a6      	b.n	800116c <socket+0x210>
   	}
   }
 800101e:	bf00      	nop
 8001020:	e002      	b.n	8001028 <socket+0xcc>
   	      break;
 8001022:	bf00      	nop
 8001024:	e000      	b.n	8001028 <socket+0xcc>
   	      break;
 8001026:	bf00      	nop
	close(sn);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f8ac 	bl	8001188 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	3301      	adds	r3, #1
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4618      	mov	r0, r3
 800103a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800103e:	f023 030f 	bic.w	r3, r3, #15
 8001042:	b25a      	sxtb	r2, r3
 8001044:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001048:	4313      	orrs	r3, r2
 800104a:	b25b      	sxtb	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fd28 	bl	8000aa4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d110      	bne.n	800107c <socket+0x120>
	{
	   port = sock_any_port++;
 800105a:	4b46      	ldr	r3, [pc, #280]	; (8001174 <socket+0x218>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	b291      	uxth	r1, r2
 8001062:	4a44      	ldr	r2, [pc, #272]	; (8001174 <socket+0x218>)
 8001064:	8011      	strh	r1, [r2, #0]
 8001066:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <socket+0x218>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001070:	4293      	cmp	r3, r2
 8001072:	d103      	bne.n	800107c <socket+0x120>
 8001074:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <socket+0x218>)
 8001076:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800107a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	3301      	adds	r3, #1
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001088:	461a      	mov	r2, r3
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	b29b      	uxth	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff fd05 	bl	8000aa4 <WIZCHIP_WRITE>
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	3301      	adds	r3, #1
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010a6:	461a      	mov	r2, r3
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f7ff fcf8 	bl	8000aa4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	3301      	adds	r3, #1
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010c0:	2101      	movs	r1, #1
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fcee 	bl	8000aa4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80010c8:	bf00      	nop
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	3301      	adds	r3, #1
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc98 	bl	8000a0c <WIZCHIP_READ>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f3      	bne.n	80010ca <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2201      	movs	r2, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <socket+0x21c>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4013      	ands	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <socket+0x21c>)
 80010fe:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <socket+0x21c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21b      	sxth	r3, r3
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <socket+0x21c>)
 800111c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2201      	movs	r2, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	b21b      	sxth	r3, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <socket+0x220>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4013      	ands	r3, r2
 8001134:	b21b      	sxth	r3, r3
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <socket+0x220>)
 800113a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <socket+0x224>)
 8001140:	2100      	movs	r1, #0
 8001142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <socket+0x228>)
 800114a:	2100      	movs	r1, #0
 800114c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800114e:	bf00      	nop
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	3301      	adds	r3, #1
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fc55 	bl	8000a0c <WIZCHIP_READ>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f3      	beq.n	8001150 <socket+0x1f4>
   return (int8_t)sn;
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}
 8001174:	20000004 	.word	0x20000004
 8001178:	20000058 	.word	0x20000058
 800117c:	2000005a 	.word	0x2000005a
 8001180:	2000005c 	.word	0x2000005c
 8001184:	2000006c 	.word	0x2000006c

08001188 <close>:

int8_t close(uint8_t sn)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d902      	bls.n	800119e <close+0x16>
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	e055      	b.n	800124a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3301      	adds	r3, #1
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011aa:	2110      	movs	r1, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fc79 	bl	8000aa4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80011b2:	bf00      	nop
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	3301      	adds	r3, #1
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fc23 	bl	8000a0c <WIZCHIP_READ>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f3      	bne.n	80011b4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	3301      	adds	r3, #1
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011d8:	211f      	movs	r1, #31
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fc62 	bl	8000aa4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2201      	movs	r2, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <close+0xcc>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4013      	ands	r3, r2
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <close+0xcc>)
 80011fc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2201      	movs	r2, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <close+0xd0>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4013      	ands	r3, r2
 8001214:	b21b      	sxth	r3, r3
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <close+0xd0>)
 800121a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <close+0xd4>)
 8001220:	2100      	movs	r1, #0
 8001222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <close+0xd8>)
 800122a:	2100      	movs	r1, #0
 800122c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800122e:	bf00      	nop
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	3301      	adds	r3, #1
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fbe5 	bl	8000a0c <WIZCHIP_READ>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f3      	bne.n	8001230 <close+0xa8>
	return SOCK_OK;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000058 	.word	0x20000058
 8001258:	2000005a 	.word	0x2000005a
 800125c:	2000005c 	.word	0x2000005c
 8001260:	2000006c 	.word	0x2000006c

08001264 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b08      	cmp	r3, #8
 8001278:	d902      	bls.n	8001280 <connect+0x1c>
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e0c6      	b.n	800140e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	3301      	adds	r3, #1
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fbbf 	bl	8000a0c <WIZCHIP_READ>
 800128e:	4603      	mov	r3, r0
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	2b01      	cmp	r3, #1
 8001296:	d002      	beq.n	800129e <connect+0x3a>
 8001298:	f06f 0304 	mvn.w	r3, #4
 800129c:	e0b7      	b.n	800140e <connect+0x1aa>
   CHECK_SOCKINIT();
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	3301      	adds	r3, #1
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fbae 	bl	8000a0c <WIZCHIP_READ>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b13      	cmp	r3, #19
 80012b4:	d002      	beq.n	80012bc <connect+0x58>
 80012b6:	f06f 0302 	mvn.w	r3, #2
 80012ba:	e0a8      	b.n	800140e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	3201      	adds	r2, #1
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	3202      	adds	r2, #2
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	3203      	adds	r2, #3
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f2:	d002      	beq.n	80012fa <connect+0x96>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <connect+0x9c>
 80012fa:	f06f 030b 	mvn.w	r3, #11
 80012fe:	e086      	b.n	800140e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <connect+0xa8>
 8001306:	f06f 030a 	mvn.w	r3, #10
 800130a:	e080      	b.n	800140e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	3301      	adds	r3, #1
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001318:	2204      	movs	r2, #4
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fc6f 	bl	8000c00 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	3301      	adds	r3, #1
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132e:	461a      	mov	r2, r3
 8001330:	88bb      	ldrh	r3, [r7, #4]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	4610      	mov	r0, r2
 800133c:	f7ff fbb2 	bl	8000aa4 <WIZCHIP_WRITE>
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	3301      	adds	r3, #1
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800134c:	461a      	mov	r2, r3
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f7ff fba5 	bl	8000aa4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	3301      	adds	r3, #1
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001366:	2104      	movs	r1, #4
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fb9b 	bl	8000aa4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800136e:	bf00      	nop
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	3301      	adds	r3, #1
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb45 	bl	8000a0c <WIZCHIP_READ>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f3      	bne.n	8001370 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <connect+0x1b4>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	fa42 f303 	asr.w	r3, r2, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d02b      	beq.n	80013f4 <connect+0x190>
 800139c:	2300      	movs	r3, #0
 800139e:	e036      	b.n	800140e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	3301      	adds	r3, #1
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fb2d 	bl	8000a0c <WIZCHIP_READ>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00c      	beq.n	80013d6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	3301      	adds	r3, #1
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013c8:	2108      	movs	r1, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb6a 	bl	8000aa4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80013d0:	f06f 030c 	mvn.w	r3, #12
 80013d4:	e01b      	b.n	800140e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	3301      	adds	r3, #1
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fb12 	bl	8000a0c <WIZCHIP_READ>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80013ee:	f06f 0303 	mvn.w	r3, #3
 80013f2:	e00c      	b.n	800140e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	3301      	adds	r3, #1
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fb03 	bl	8000a0c <WIZCHIP_READ>
 8001406:	4603      	mov	r3, r0
 8001408:	2b17      	cmp	r3, #23
 800140a:	d1c9      	bne.n	80013a0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000058 	.word	0x20000058

0800141c <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	4613      	mov	r3, r2
 800142a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001430:	2300      	movs	r3, #0
 8001432:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b08      	cmp	r3, #8
 8001438:	d902      	bls.n	8001440 <send+0x24>
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e0de      	b.n	80015fe <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3301      	adds	r3, #1
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fadf 	bl	8000a0c <WIZCHIP_READ>
 800144e:	4603      	mov	r3, r0
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	2b01      	cmp	r3, #1
 8001456:	d002      	beq.n	800145e <send+0x42>
 8001458:	f06f 0304 	mvn.w	r3, #4
 800145c:	e0cf      	b.n	80015fe <send+0x1e2>
   CHECK_SOCKDATA();
 800145e:	88bb      	ldrh	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <send+0x4e>
 8001464:	f06f 030d 	mvn.w	r3, #13
 8001468:	e0c9      	b.n	80015fe <send+0x1e2>
   tmp = getSn_SR(sn);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	3301      	adds	r3, #1
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fac8 	bl	8000a0c <WIZCHIP_READ>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b17      	cmp	r3, #23
 8001484:	d005      	beq.n	8001492 <send+0x76>
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b1c      	cmp	r3, #28
 800148a:	d002      	beq.n	8001492 <send+0x76>
 800148c:	f06f 0306 	mvn.w	r3, #6
 8001490:	e0b5      	b.n	80015fe <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001492:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <send+0x1ec>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	fa42 f303 	asr.w	r3, r2, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d039      	beq.n	800151a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	3301      	adds	r3, #1
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff faaa 	bl	8000a0c <WIZCHIP_READ>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d019      	beq.n	80014fe <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	3301      	adds	r3, #1
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014d6:	2110      	movs	r1, #16
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fae3 	bl	8000aa4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2201      	movs	r2, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <send+0x1ec>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <send+0x1ec>)
 80014fa:	801a      	strh	r2, [r3, #0]
 80014fc:	e00d      	b.n	800151a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <send+0xfa>
      {
         close(sn);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe3c 	bl	8001188 <close>
         return SOCKERR_TIMEOUT;
 8001510:	f06f 030c 	mvn.w	r3, #12
 8001514:	e073      	b.n	80015fe <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001516:	2300      	movs	r3, #0
 8001518:	e071      	b.n	80015fe <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	3301      	adds	r3, #1
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fa70 	bl	8000a0c <WIZCHIP_READ>
 800152c:	4603      	mov	r3, r0
 800152e:	b29b      	uxth	r3, r3
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001534:	88ba      	ldrh	r2, [r7, #4]
 8001536:	89bb      	ldrh	r3, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d901      	bls.n	8001540 <send+0x124>
 800153c:	89bb      	ldrh	r3, [r7, #12]
 800153e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fbbc 	bl	8000cc0 <getSn_TX_FSR>
 8001548:	4603      	mov	r3, r0
 800154a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	3301      	adds	r3, #1
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fa57 	bl	8000a0c <WIZCHIP_READ>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b17      	cmp	r3, #23
 8001566:	d009      	beq.n	800157c <send+0x160>
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b1c      	cmp	r3, #28
 800156c:	d006      	beq.n	800157c <send+0x160>
      {
         close(sn);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe09 	bl	8001188 <close>
         return SOCKERR_SOCKSTATUS;
 8001576:	f06f 0306 	mvn.w	r3, #6
 800157a:	e040      	b.n	80015fe <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <send+0x1f0>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	fa42 f303 	asr.w	r3, r2, r3
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <send+0x180>
 8001590:	88ba      	ldrh	r2, [r7, #4]
 8001592:	89bb      	ldrh	r3, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d901      	bls.n	800159c <send+0x180>
 8001598:	2300      	movs	r3, #0
 800159a:	e030      	b.n	80015fe <send+0x1e2>
      if(len <= freesize) break;
 800159c:	88ba      	ldrh	r2, [r7, #4]
 800159e:	89bb      	ldrh	r3, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d900      	bls.n	80015a6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80015a4:	e7cc      	b.n	8001540 <send+0x124>
      if(len <= freesize) break;
 80015a6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	6839      	ldr	r1, [r7, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc1c 	bl	8000dec <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	3301      	adds	r3, #1
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015c0:	2120      	movs	r1, #32
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fa6e 	bl	8000aa4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80015c8:	bf00      	nop
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3301      	adds	r3, #1
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fa18 	bl	8000a0c <WIZCHIP_READ>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f3      	bne.n	80015ca <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2201      	movs	r2, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <send+0x1ec>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <send+0x1ec>)
 80015fa:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80015fc:	88bb      	ldrh	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000005a 	.word	0x2000005a
 800160c:	20000058 	.word	0x20000058

08001610 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d902      	bls.n	8001634 <recv+0x24>
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e09c      	b.n	800176e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	3301      	adds	r3, #1
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f9e5 	bl	8000a0c <WIZCHIP_READ>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	2b01      	cmp	r3, #1
 800164a:	d002      	beq.n	8001652 <recv+0x42>
 800164c:	f06f 0304 	mvn.w	r3, #4
 8001650:	e08d      	b.n	800176e <recv+0x15e>
   CHECK_SOCKDATA();
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <recv+0x4e>
 8001658:	f06f 030d 	mvn.w	r3, #13
 800165c:	e087      	b.n	800176e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	3301      	adds	r3, #1
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f9ce 	bl	8000a0c <WIZCHIP_READ>
 8001670:	4603      	mov	r3, r0
 8001672:	b29b      	uxth	r3, r3
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001678:	89ba      	ldrh	r2, [r7, #12]
 800167a:	88bb      	ldrh	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	d201      	bcs.n	8001684 <recv+0x74>
 8001680:	89bb      	ldrh	r3, [r7, #12]
 8001682:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb65 	bl	8000d56 <getSn_RX_RSR>
 800168c:	4603      	mov	r3, r0
 800168e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	3301      	adds	r3, #1
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff f9b5 	bl	8000a0c <WIZCHIP_READ>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b17      	cmp	r3, #23
 80016aa:	d026      	beq.n	80016fa <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b1c      	cmp	r3, #28
 80016b0:	d11c      	bne.n	80016ec <recv+0xdc>
            {
               if(recvsize != 0) break;
 80016b2:	89bb      	ldrh	r3, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d133      	bne.n	8001720 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fb00 	bl	8000cc0 <getSn_TX_FSR>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461c      	mov	r4, r3
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3301      	adds	r3, #1
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f99b 	bl	8000a0c <WIZCHIP_READ>
 80016d6:	4603      	mov	r3, r0
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	429c      	cmp	r4, r3
 80016dc:	d10d      	bne.n	80016fa <recv+0xea>
               {
                  close(sn);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fd51 	bl	8001188 <close>
                  return SOCKERR_SOCKSTATUS;
 80016e6:	f06f 0306 	mvn.w	r3, #6
 80016ea:	e040      	b.n	800176e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fd4a 	bl	8001188 <close>
               return SOCKERR_SOCKSTATUS;
 80016f4:	f06f 0306 	mvn.w	r3, #6
 80016f8:	e039      	b.n	800176e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <recv+0x168>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	fa42 f303 	asr.w	r3, r2, r3
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d004      	beq.n	8001718 <recv+0x108>
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <recv+0x108>
 8001714:	2300      	movs	r3, #0
 8001716:	e02a      	b.n	800176e <recv+0x15e>
         if(recvsize != 0) break;
 8001718:	89bb      	ldrh	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800171e:	e7b1      	b.n	8001684 <recv+0x74>
               if(recvsize != 0) break;
 8001720:	bf00      	nop
 8001722:	e000      	b.n	8001726 <recv+0x116>
         if(recvsize != 0) break;
 8001724:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001726:	89ba      	ldrh	r2, [r7, #12]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d201      	bcs.n	8001732 <recv+0x122>
 800172e:	89bb      	ldrh	r3, [r7, #12]
 8001730:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001732:	88ba      	ldrh	r2, [r7, #4]
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fbb3 	bl	8000ea4 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	3301      	adds	r3, #1
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f9a9 	bl	8000aa4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001752:	bf00      	nop
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	3301      	adds	r3, #1
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f953 	bl	8000a0c <WIZCHIP_READ>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f3      	bne.n	8001754 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800176c:	88bb      	ldrh	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop
 8001778:	20000058 	.word	0x20000058

0800177c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	70fb      	strb	r3, [r7, #3]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	2300      	movs	r3, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <reg_wizchip_cs_cbfunc+0x16>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <reg_wizchip_cs_cbfunc+0x40>)
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <reg_wizchip_cs_cbfunc+0x44>)
 800182e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <reg_wizchip_cs_cbfunc+0x40>)
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <reg_wizchip_cs_cbfunc+0x48>)
 8001834:	619a      	str	r2, [r3, #24]
 8001836:	e006      	b.n	8001846 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <reg_wizchip_cs_cbfunc+0x40>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <reg_wizchip_cs_cbfunc+0x40>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6193      	str	r3, [r2, #24]
   }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008
 8001858:	08001799 	.word	0x08001799
 800185c:	080017a7 	.word	0x080017a7

08001860 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800186a:	bf00      	nop
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <reg_wizchip_spi_cbfunc+0x4c>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f9      	beq.n	800186c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <reg_wizchip_spi_cbfunc+0x24>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d106      	bne.n	8001892 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <reg_wizchip_spi_cbfunc+0x4c>)
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <reg_wizchip_spi_cbfunc+0x50>)
 8001888:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <reg_wizchip_spi_cbfunc+0x4c>)
 800188c:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <reg_wizchip_spi_cbfunc+0x54>)
 800188e:	621a      	str	r2, [r3, #32]
 8001890:	e006      	b.n	80018a0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001892:	4a06      	ldr	r2, [pc, #24]	; (80018ac <reg_wizchip_spi_cbfunc+0x4c>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <reg_wizchip_spi_cbfunc+0x4c>)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6213      	str	r3, [r2, #32]
   }
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	20000008 	.word	0x20000008
 80018b0:	080017ed 	.word	0x080017ed
 80018b4:	080017fd 	.word	0x080017fd

080018b8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2206      	movs	r2, #6
 80018c2:	4619      	mov	r1, r3
 80018c4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80018c8:	f7ff f93a 	bl	8000b40 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2204      	movs	r2, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018d8:	f7ff f932 	bl	8000b40 <WIZCHIP_READ_BUF>
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2204      	movs	r2, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80018e8:	f7ff f92a 	bl	8000b40 <WIZCHIP_READ_BUF>
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2204      	movs	r2, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80018f8:	f7ff f922 	bl	8000b40 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff f8d0 	bl	8000aa4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff f881 	bl	8000a0c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2206      	movs	r2, #6
 800190e:	4619      	mov	r1, r3
 8001910:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001914:	f7ff f974 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2204      	movs	r2, #4
 800191e:	4619      	mov	r1, r3
 8001920:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001924:	f7ff f96c 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2204      	movs	r2, #4
 800192e:	4619      	mov	r1, r3
 8001930:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001934:	f7ff f964 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2204      	movs	r2, #4
 800193e:	4619      	mov	r1, r3
 8001940:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001944:	f7ff f95c 	bl	8000c00 <WIZCHIP_WRITE_BUF>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800195e:	f7ff ffab 	bl	80018b8 <wizchip_sw_reset>
   if(txsize)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d03b      	beq.n	80019e0 <wizchip_init+0x90>
   {
      tmp = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e015      	b.n	800199e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	4413      	add	r3, r2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001988:	2b10      	cmp	r3, #16
 800198a:	dd02      	ble.n	8001992 <wizchip_init+0x42>
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	e066      	b.n	8001a60 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	dde5      	ble.n	8001972 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e015      	b.n	80019d8 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80019ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	3301      	adds	r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80019ba:	4618      	mov	r0, r3
 80019bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f86c 	bl	8000aa4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019dc:	2b07      	cmp	r3, #7
 80019de:	dde5      	ble.n	80019ac <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d03b      	beq.n	8001a5e <wizchip_init+0x10e>
   {
      tmp = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e015      	b.n	8001a1c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80019f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	4413      	add	r3, r2
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001a02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	dd02      	ble.n	8001a10 <wizchip_init+0xc0>
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e027      	b.n	8001a60 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a20:	2b07      	cmp	r3, #7
 8001a22:	dde5      	ble.n	80019f0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e015      	b.n	8001a56 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	3301      	adds	r3, #1
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f82d 	bl	8000aa4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	2b07      	cmp	r3, #7
 8001a5c:	dde5      	ble.n	8001a2a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2206      	movs	r2, #6
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001a7a:	f7ff f8c1 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	330e      	adds	r3, #14
 8001a82:	2204      	movs	r2, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a8a:	f7ff f8b9 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	330a      	adds	r3, #10
 8001a92:	2204      	movs	r2, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001a9a:	f7ff f8b1 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3306      	adds	r3, #6
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001aaa:	f7ff f8a9 	bl	8000c00 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7c9a      	ldrb	r2, [r3, #18]
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <wizchip_setnetinfo+0x78>)
 8001ab4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7cda      	ldrb	r2, [r3, #19]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <wizchip_setnetinfo+0x78>)
 8001abc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7d1a      	ldrb	r2, [r3, #20]
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <wizchip_setnetinfo+0x78>)
 8001ac4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7d5a      	ldrb	r2, [r3, #21]
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <wizchip_setnetinfo+0x78>)
 8001acc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7d9a      	ldrb	r2, [r3, #22]
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <wizchip_setnetinfo+0x7c>)
 8001ad4:	701a      	strb	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000074 	.word	0x20000074
 8001ae4:	20000078 	.word	0x20000078

08001ae8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2206      	movs	r2, #6
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001afa:	f7ff f821 	bl	8000b40 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	330e      	adds	r3, #14
 8001b02:	2204      	movs	r2, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b0a:	f7ff f819 	bl	8000b40 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	330a      	adds	r3, #10
 8001b12:	2204      	movs	r2, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001b1a:	f7ff f811 	bl	8000b40 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3306      	adds	r3, #6
 8001b22:	2204      	movs	r2, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001b2a:	f7ff f809 	bl	8000b40 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <wizchip_getnetinfo+0x78>)
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <wizchip_getnetinfo+0x78>)
 8001b38:	785a      	ldrb	r2, [r3, #1]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <wizchip_getnetinfo+0x78>)
 8001b40:	789a      	ldrb	r2, [r3, #2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <wizchip_getnetinfo+0x78>)
 8001b48:	78da      	ldrb	r2, [r3, #3]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <wizchip_getnetinfo+0x7c>)
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	759a      	strb	r2, [r3, #22]
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000074 	.word	0x20000074
 8001b64:	20000078 	.word	0x20000078

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b6e:	490e      	ldr	r1, [pc, #56]	; (8001ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b70:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b84:	4c0b      	ldr	r4, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b92:	f7fe ff29 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f001 fd2b 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7fe fccd 	bl	8000538 <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001bac:	080036a0 	.word	0x080036a0
  ldr r2, =_sbss
 8001bb0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001bb4:	200000d8 	.word	0x200000d8

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_Init+0x40>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_Init+0x40>)
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_Init+0x40>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f931 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	200f      	movs	r0, #15
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7fe fe60 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f93b 	bl	8001e9a <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f911 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000038 	.word	0x20000038
 8001c5c:	20000034 	.word	0x20000034

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000038 	.word	0x20000038
 8001c84:	200000d4 	.word	0x200000d4

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	200000d4 	.word	0x200000d4

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000038 	.word	0x20000038

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff47 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff5c 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffb0 	bl	8001e08 <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e16b      	b.n	80021a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 815a 	bne.w	80021a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d005      	beq.n	8001f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d130      	bne.n	8001f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80b4 	beq.w	80021a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <HAL_GPIO_Init+0x30c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a5f      	ldr	r2, [pc, #380]	; (80021c0 <HAL_GPIO_Init+0x30c>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_GPIO_Init+0x30c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002056:	4a5b      	ldr	r2, [pc, #364]	; (80021c4 <HAL_GPIO_Init+0x310>)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_GPIO_Init+0x314>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x226>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_GPIO_Init+0x318>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x222>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a50      	ldr	r2, [pc, #320]	; (80021d0 <HAL_GPIO_Init+0x31c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x21e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4f      	ldr	r2, [pc, #316]	; (80021d4 <HAL_GPIO_Init+0x320>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x21a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4e      	ldr	r2, [pc, #312]	; (80021d8 <HAL_GPIO_Init+0x324>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x216>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_GPIO_Init+0x328>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x212>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_GPIO_Init+0x32c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4b      	ldr	r2, [pc, #300]	; (80021e4 <HAL_GPIO_Init+0x330>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x20a>
 80020ba:	2307      	movs	r3, #7
 80020bc:	e00e      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020be:	2308      	movs	r3, #8
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	; (80021c4 <HAL_GPIO_Init+0x310>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_GPIO_Init+0x334>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211e:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <HAL_GPIO_Init+0x334>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_GPIO_Init+0x334>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_GPIO_Init+0x334>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_GPIO_Init+0x334>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_GPIO_Init+0x334>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_GPIO_Init+0x334>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_GPIO_Init+0x334>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae90 	bls.w	8001ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40021c00 	.word	0x40021c00
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002208:	e003      	b.n	8002212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	619a      	str	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e264      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d075      	beq.n	800232a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223e:	4ba3      	ldr	r3, [pc, #652]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d00c      	beq.n	8002264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4ba0      	ldr	r3, [pc, #640]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002252:	2b08      	cmp	r3, #8
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b9d      	ldr	r3, [pc, #628]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b99      	ldr	r3, [pc, #612]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05b      	beq.n	8002328 <HAL_RCC_OscConfig+0x108>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d157      	bne.n	8002328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e23f      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x74>
 8002286:	4b91      	ldr	r3, [pc, #580]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a90      	ldr	r2, [pc, #576]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a8a      	ldr	r2, [pc, #552]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a87      	ldr	r2, [pc, #540]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 80022b8:	4b84      	ldr	r3, [pc, #528]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a83      	ldr	r2, [pc, #524]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b81      	ldr	r3, [pc, #516]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a80      	ldr	r2, [pc, #512]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fcd6 	bl	8001c88 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff fcd2 	bl	8001c88 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e204      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff fcc2 	bl	8001c88 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff fcbe 	bl	8001c88 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1f0      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002336:	4b65      	ldr	r3, [pc, #404]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1c4      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b56      	ldr	r3, [pc, #344]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4952      	ldr	r1, [pc, #328]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_OscConfig+0x2b0>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff fc77 	bl	8001c88 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff fc73 	bl	8001c88 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1a5      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b46      	ldr	r3, [pc, #280]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4940      	ldr	r1, [pc, #256]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <HAL_RCC_OscConfig+0x2b0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff fc56 	bl	8001c88 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7ff fc52 	bl	8001c88 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e184      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d030      	beq.n	800246c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_RCC_OscConfig+0x2b4>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff fc36 	bl	8001c88 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff fc32 	bl	8001c88 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e164      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x200>
 800243e:	e015      	b.n	800246c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x2b4>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fc1f 	bl	8001c88 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fc1b 	bl	8001c88 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e14d      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a0 	beq.w	80025ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_OscConfig+0x2b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d121      	bne.n	80024fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_OscConfig+0x2b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_RCC_OscConfig+0x2b8>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c2:	f7ff fbe1 	bl	8001c88 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	e011      	b.n	80024ee <HAL_RCC_OscConfig+0x2ce>
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	42470000 	.word	0x42470000
 80024d4:	42470e80 	.word	0x42470e80
 80024d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7ff fbd4 	bl	8001c88 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e106      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b85      	ldr	r3, [pc, #532]	; (8002704 <HAL_RCC_OscConfig+0x4e4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x2f0>
 8002502:	4b81      	ldr	r3, [pc, #516]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	4a80      	ldr	r2, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
 800250e:	e01c      	b.n	800254a <HAL_RCC_OscConfig+0x32a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b05      	cmp	r3, #5
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_OscConfig+0x312>
 8002518:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a7a      	ldr	r2, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	4b78      	ldr	r3, [pc, #480]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a77      	ldr	r2, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0x32a>
 8002532:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	4a74      	ldr	r2, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6713      	str	r3, [r2, #112]	; 0x70
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a71      	ldr	r2, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d015      	beq.n	800257e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff fb99 	bl	8001c88 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff fb95 	bl	8001c88 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0c5      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	4b65      	ldr	r3, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ee      	beq.n	800255a <HAL_RCC_OscConfig+0x33a>
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff fb83 	bl	8001c88 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7ff fb7f 	bl	8001c88 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0af      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ee      	bne.n	8002586 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d105      	bne.n	80025ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ae:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 809b 	beq.w	80026fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d05c      	beq.n	800268a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d141      	bne.n	800265c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	4b4c      	ldr	r3, [pc, #304]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff fb53 	bl	8001c88 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7ff fb4f 	bl	8001c88 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e081      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	019b      	lsls	r3, r3, #6
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	3b01      	subs	r3, #1
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff fb28 	bl	8001c88 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7ff fb24 	bl	8001c88 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e056      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x41c>
 800265a:	e04e      	b.n	80026fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff fb11 	bl	8001c88 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff fb0d 	bl	8001c88 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e03f      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x44a>
 8002688:	e037      	b.n	80026fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e032      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d028      	beq.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d11a      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	3b01      	subs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40007000 	.word	0x40007000
 8002708:	40023800 	.word	0x40023800
 800270c:	42470060 	.word	0x42470060

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7ff fa42 	bl	8001c88 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7ff fa3e 	bl	8001c88 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f9a2 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08003680 	.word	0x08003680
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000034 	.word	0x20000034

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	2300      	movs	r3, #0
 80028ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f4:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d00d      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002900:	2b08      	cmp	r3, #8
 8002902:	f200 80bd 	bhi.w	8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x34>
 800290a:	2b04      	cmp	r3, #4
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x3a>
 800290e:	e0b7      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002912:	60bb      	str	r3, [r7, #8]
       break;
 8002914:	e0b7      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002916:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002918:	60bb      	str	r3, [r7, #8]
      break;
 800291a:	e0b4      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291c:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002926:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04d      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	461a      	mov	r2, r3
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	ea02 0800 	and.w	r8, r2, r0
 800294a:	ea03 0901 	and.w	r9, r3, r1
 800294e:	4640      	mov	r0, r8
 8002950:	4649      	mov	r1, r9
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	014b      	lsls	r3, r1, #5
 800295c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002960:	0142      	lsls	r2, r0, #5
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	ebb0 0008 	subs.w	r0, r0, r8
 800296a:	eb61 0109 	sbc.w	r1, r1, r9
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	018b      	lsls	r3, r1, #6
 8002978:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800297c:	0182      	lsls	r2, r0, #6
 800297e:	1a12      	subs	r2, r2, r0
 8002980:	eb63 0301 	sbc.w	r3, r3, r1
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	00d9      	lsls	r1, r3, #3
 800298e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002992:	00d0      	lsls	r0, r2, #3
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	eb12 0208 	adds.w	r2, r2, r8
 800299c:	eb43 0309 	adc.w	r3, r3, r9
 80029a0:	f04f 0000 	mov.w	r0, #0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	0259      	lsls	r1, r3, #9
 80029aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029ae:	0250      	lsls	r0, r2, #9
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f7fd fc02 	bl	80001c8 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e04a      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	461a      	mov	r2, r3
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029de:	f04f 0100 	mov.w	r1, #0
 80029e2:	ea02 0400 	and.w	r4, r2, r0
 80029e6:	ea03 0501 	and.w	r5, r3, r1
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	014b      	lsls	r3, r1, #5
 80029f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029fc:	0142      	lsls	r2, r0, #5
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	1b00      	subs	r0, r0, r4
 8002a04:	eb61 0105 	sbc.w	r1, r1, r5
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	018b      	lsls	r3, r1, #6
 8002a12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a16:	0182      	lsls	r2, r0, #6
 8002a18:	1a12      	subs	r2, r2, r0
 8002a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	00d9      	lsls	r1, r3, #3
 8002a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a2c:	00d0      	lsls	r0, r2, #3
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	1912      	adds	r2, r2, r4
 8002a34:	eb45 0303 	adc.w	r3, r5, r3
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	0299      	lsls	r1, r3, #10
 8002a42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a46:	0290      	lsls	r0, r2, #10
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	f7fd fbb6 	bl	80001c8 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	60bb      	str	r3, [r7, #8]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a82:	60bb      	str	r3, [r7, #8]
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	68bb      	ldr	r3, [r7, #8]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07b      	b.n	8002baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d108      	bne.n	8002acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac2:	d009      	beq.n	8002ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
 8002aca:	e005      	b.n	8002ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fd ff06 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	ea42 0103 	orr.w	r1, r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0104 	and.w	r1, r3, #4
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f003 0210 	and.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b088      	sub	sp, #32
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_SPI_Transmit+0x22>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e126      	b.n	8002e22 <HAL_SPI_Transmit+0x270>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bdc:	f7ff f854 	bl	8001c88 <HAL_GetTick>
 8002be0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bf6:	e10b      	b.n	8002e10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_Transmit+0x52>
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c08:	e102      	b.n	8002e10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c50:	d10f      	bne.n	8002c72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d007      	beq.n	8002c90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c98:	d14b      	bne.n	8002d32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_SPI_Transmit+0xf6>
 8002ca2:	8afb      	ldrh	r3, [r7, #22]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d13e      	bne.n	8002d26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ccc:	e02b      	b.n	8002d26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d112      	bne.n	8002d02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	881a      	ldrh	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	1c9a      	adds	r2, r3, #2
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d00:	e011      	b.n	8002d26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d02:	f7fe ffc1 	bl	8001c88 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d803      	bhi.n	8002d1a <HAL_SPI_Transmit+0x168>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d102      	bne.n	8002d20 <HAL_SPI_Transmit+0x16e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d24:	e074      	b.n	8002e10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ce      	bne.n	8002cce <HAL_SPI_Transmit+0x11c>
 8002d30:	e04c      	b.n	8002dcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Transmit+0x18e>
 8002d3a:	8afb      	ldrh	r3, [r7, #22]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d140      	bne.n	8002dc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d66:	e02c      	b.n	8002dc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d113      	bne.n	8002d9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9c:	e011      	b.n	8002dc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9e:	f7fe ff73 	bl	8001c88 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d803      	bhi.n	8002db6 <HAL_SPI_Transmit+0x204>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Transmit+0x20a>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc0:	e026      	b.n	8002e10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1cd      	bne.n	8002d68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fbcb 	bl	800356c <SPI_EndRxTxTransaction>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e000      	b.n	8002e10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	af02      	add	r7, sp, #8
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e46:	d112      	bne.n	8002e6e <HAL_SPI_Receive+0x44>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10e      	bne.n	8002e6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2204      	movs	r2, #4
 8002e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f8f1 	bl	800304c <HAL_SPI_TransmitReceive>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	e0ea      	b.n	8003044 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_SPI_Receive+0x52>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0e3      	b.n	8003044 <HAL_SPI_Receive+0x21a>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e84:	f7fe ff00 	bl	8001c88 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e9a:	e0ca      	b.n	8003032 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_Receive+0x7e>
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eac:	e0c1      	b.n	8003032 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	88fa      	ldrh	r2, [r7, #6]
 8002ec6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef4:	d10f      	bne.n	8002f16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d007      	beq.n	8002f34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d162      	bne.n	8003002 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f3c:	e02e      	b.n	8002f9c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d115      	bne.n	8002f78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f103 020c 	add.w	r2, r3, #12
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f76:	e011      	b.n	8002f9c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f78:	f7fe fe86 	bl	8001c88 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d803      	bhi.n	8002f90 <HAL_SPI_Receive+0x166>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Receive+0x16c>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f9a:	e04a      	b.n	8003032 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1cb      	bne.n	8002f3e <HAL_SPI_Receive+0x114>
 8002fa6:	e031      	b.n	800300c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d113      	bne.n	8002fde <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fdc:	e011      	b.n	8003002 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fde:	f7fe fe53 	bl	8001c88 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d803      	bhi.n	8002ff6 <HAL_SPI_Receive+0x1cc>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_Receive+0x1d2>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003000:	e017      	b.n	8003032 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1cd      	bne.n	8002fa8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	6839      	ldr	r1, [r7, #0]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fa45 	bl	80034a0 <SPI_EndRxTransaction>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
 800302e:	e000      	b.n	8003032 <HAL_SPI_Receive+0x208>
  }

error :
 8003030:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800305a:	2301      	movs	r3, #1
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x26>
 800306e:	2302      	movs	r3, #2
 8003070:	e18a      	b.n	8003388 <HAL_SPI_TransmitReceive+0x33c>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307a:	f7fe fe05 	bl	8001c88 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003090:	887b      	ldrh	r3, [r7, #2]
 8003092:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003094:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003098:	2b01      	cmp	r3, #1
 800309a:	d00f      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x70>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a2:	d107      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x68>
 80030ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d003      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ba:	e15b      	b.n	8003374 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_SPI_TransmitReceive+0x82>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_SPI_TransmitReceive+0x82>
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030d4:	e14e      	b.n	8003374 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d003      	beq.n	80030ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2205      	movs	r2, #5
 80030e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	887a      	ldrh	r2, [r7, #2]
 80030fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d007      	beq.n	800313e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003146:	d178      	bne.n	800323a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_SPI_TransmitReceive+0x10a>
 8003150:	8b7b      	ldrh	r3, [r7, #26]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d166      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	881a      	ldrh	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	1c9a      	adds	r2, r3, #2
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317a:	e053      	b.n	8003224 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b02      	cmp	r3, #2
 8003188:	d11b      	bne.n	80031c2 <HAL_SPI_TransmitReceive+0x176>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d016      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x176>
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d113      	bne.n	80031c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d119      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x1b8>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d014      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	b292      	uxth	r2, r2
 80031e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003200:	2301      	movs	r3, #1
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003204:	f7fe fd40 	bl	8001c88 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003210:	429a      	cmp	r2, r3
 8003212:	d807      	bhi.n	8003224 <HAL_SPI_TransmitReceive+0x1d8>
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d003      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003222:	e0a7      	b.n	8003374 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1a6      	bne.n	800317c <HAL_SPI_TransmitReceive+0x130>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1a1      	bne.n	800317c <HAL_SPI_TransmitReceive+0x130>
 8003238:	e07c      	b.n	8003334 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x1fc>
 8003242:	8b7b      	ldrh	r3, [r7, #26]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d16b      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	7812      	ldrb	r2, [r2, #0]
 8003254:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800326e:	e057      	b.n	8003320 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	d11c      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x26c>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d017      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0x26c>
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d114      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	330c      	adds	r3, #12
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d119      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x2ae>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d014      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f6:	2301      	movs	r3, #1
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032fa:	f7fe fcc5 	bl	8001c88 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003306:	429a      	cmp	r2, r3
 8003308:	d803      	bhi.n	8003312 <HAL_SPI_TransmitReceive+0x2c6>
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d102      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x2cc>
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	2b00      	cmp	r3, #0
 8003316:	d103      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800331e:	e029      	b.n	8003374 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1a2      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x224>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d19d      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f917 	bl	800356c <SPI_EndRxTxTransaction>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d006      	beq.n	8003352 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003350:	e010      	b.n	8003374 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	e000      	b.n	8003374 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003372:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003384:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003388:	4618      	mov	r0, r3
 800338a:	3730      	adds	r7, #48	; 0x30
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033a0:	f7fe fc72 	bl	8001c88 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033b0:	f7fe fc6a 	bl	8001c88 <HAL_GetTick>
 80033b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	015b      	lsls	r3, r3, #5
 80033bc:	0d1b      	lsrs	r3, r3, #20
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033c6:	e054      	b.n	8003472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d050      	beq.n	8003472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d0:	f7fe fc5a 	bl	8001c88 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d902      	bls.n	80033e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d13d      	bne.n	8003462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033fe:	d111      	bne.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003408:	d004      	beq.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003412:	d107      	bne.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342c:	d10f      	bne.n	800344e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800344c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e017      	b.n	8003492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3b01      	subs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d19b      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b4:	d111      	bne.n	80034da <SPI_EndRxTransaction+0x3a>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034be:	d004      	beq.n	80034ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c8:	d107      	bne.n	80034da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e2:	d12a      	bne.n	800353a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d012      	beq.n	8003514 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff ff49 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02d      	beq.n	8003560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e026      	b.n	8003562 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2200      	movs	r2, #0
 800351c:	2101      	movs	r1, #1
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff ff36 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01a      	beq.n	8003560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f043 0220 	orr.w	r2, r3, #32
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e013      	b.n	8003562 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	2101      	movs	r1, #1
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff ff23 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e000      	b.n	8003562 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <SPI_EndRxTxTransaction+0x7c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x80>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0d5b      	lsrs	r3, r3, #21
 8003584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003596:	d112      	bne.n	80035be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff fef4 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00f      	b.n	80035de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d0f2      	beq.n	80035be <SPI_EndRxTxTransaction+0x52>
 80035d8:	e000      	b.n	80035dc <SPI_EndRxTxTransaction+0x70>
        break;
 80035da:	bf00      	nop
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000000 	.word	0x20000000
 80035ec:	165e9f81 	.word	0x165e9f81

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4d0d      	ldr	r5, [pc, #52]	; (8003628 <__libc_init_array+0x38>)
 80035f4:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	2600      	movs	r6, #0
 80035fc:	42a6      	cmp	r6, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	4d0b      	ldr	r5, [pc, #44]	; (8003630 <__libc_init_array+0x40>)
 8003602:	4c0c      	ldr	r4, [pc, #48]	; (8003634 <__libc_init_array+0x44>)
 8003604:	f000 f820 	bl	8003648 <_init>
 8003608:	1b64      	subs	r4, r4, r5
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2600      	movs	r6, #0
 800360e:	42a6      	cmp	r6, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f855 3b04 	ldr.w	r3, [r5], #4
 8003618:	4798      	blx	r3
 800361a:	3601      	adds	r6, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003622:	4798      	blx	r3
 8003624:	3601      	adds	r6, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	08003698 	.word	0x08003698
 800362c:	08003698 	.word	0x08003698
 8003630:	08003698 	.word	0x08003698
 8003634:	0800369c 	.word	0x0800369c

08003638 <memset>:
 8003638:	4402      	add	r2, r0
 800363a:	4603      	mov	r3, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <_init>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr

08003654 <_fini>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr
